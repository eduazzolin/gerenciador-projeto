name: CI/CD Pipeline

on:
  push:
    branches:
      - docker
  pull_request:
    branches:
      - docker

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: gerenciador_projeto
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: "17"
          distribution: "adopt"

      # Wait for PostgreSQL to be ready
      - name: Wait for PostgreSQL
        run: |
          while ! pg_isready -h localhost -U test; do
            sleep 1
          done

      # Configura o cache do Maven para otimizar o tempo de build
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Run tests
        env:
          DB_URL: jdbc:postgresql://localhost:5432/gerenciador_projeto
          DB_USERNAME: test
          DB_PASSWORD: test
          JWT_EXPIRACAO: 3600  # Defina um valor adequado ou remova se não for necessário
          JWT_CHAVE_ASSINATURA: test
        run: mvn clean test

  deploy:
    name: Deploy
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to production
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
